{"ast":null,"code":"import TaxRates from './TaxRates';\n\n// Asgari ücret istisnası 2022 ve sonrası için geçerli\nexport function calculateSalary({\n  year,\n  grossSalaries,\n  asgariUcret\n}) {\n  const rates = TaxRates.getRates(year);\n  const results = [];\n  let cumulativeMatrah = 0;\n  for (let i = 0; i < grossSalaries.length; i++) {\n    var _grossSalaries$i;\n    const A = parseFloat((_grossSalaries$i = grossSalaries[i]) === null || _grossSalaries$i === void 0 ? void 0 : _grossSalaries$i.toString().replace(',', '.')) || 0;\n    const B = A * rates.sgk;\n    const C = A * rates.issizlik;\n    const D = A - (B + C);\n\n    // Asgari ücret istisnası (2022 ve sonrası)\n    let gelirVergisiMatrah = D;\n    let damgaVergisiMatrah = A;\n    let asgariUcretMatrah = 0;\n    let asgariUcretDamga = 0;\n    let I = 0; // Asgari Geçim İndirimi (2022+ yok)\n\n    if (year >= 2022) {\n      // Sadece asgari ücreti aşan matrah vergilendirilecek\n      asgariUcretMatrah = Math.min(D, asgariUcret - asgariUcret * (rates.sgk + rates.issizlik));\n      gelirVergisiMatrah = Math.max(0, D - asgariUcretMatrah);\n      asgariUcretDamga = Math.min(A, asgariUcret);\n      damgaVergisiMatrah = Math.max(0, A - asgariUcretDamga);\n    }\n\n    // Kümülatif matrah (önceki aylar dahil)\n    const G = cumulativeMatrah + D;\n\n    // Gelir vergisi hesaplama (kademeli)\n    let kalanMatrah = gelirVergisiMatrah;\n    let E = 0;\n    let kalanKumulatif = G - gelirVergisiMatrah;\n    for (const dilim of rates.gelir) {\n      // Bu dilimde ne kadar matrah var?\n      const dilimBas = Math.max(dilim.min, kalanKumulatif);\n      const dilimSon = Math.min(dilim.max, kalanKumulatif + kalanMatrah);\n      if (dilimSon > dilimBas) {\n        const tutar = dilimSon - dilimBas;\n        E += tutar * dilim.oran;\n        kalanMatrah -= tutar;\n        kalanKumulatif += tutar;\n      }\n      if (kalanMatrah <= 0) break;\n    }\n\n    // Damga vergisi\n    const F = damgaVergisiMatrah * rates.damga;\n\n    // Net maaş\n    const H = A - (B + C + E + F);\n    // Toplam ele geçen\n    const J = H + I;\n\n    // Sonuçları kaydet\n    results.push({\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H,\n      I,\n      J\n    });\n    cumulativeMatrah += D;\n  }\n  return results;\n}","map":{"version":3,"names":["TaxRates","calculateSalary","year","grossSalaries","asgariUcret","rates","getRates","results","cumulativeMatrah","i","length","_grossSalaries$i","A","parseFloat","toString","replace","B","sgk","C","issizlik","D","gelirVergisiMatrah","damgaVergisiMatrah","asgariUcretMatrah","asgariUcretDamga","I","Math","min","max","G","kalanMatrah","E","kalanKumulatif","dilim","gelir","dilimBas","dilimSon","tutar","oran","F","damga","H","J","push"],"sources":["C:/Users/enesk/Desktop/enestream/brutten-nete/src/utils/calculateSalary.js"],"sourcesContent":["import TaxRates from './TaxRates';\r\n\r\n// Asgari ücret istisnası 2022 ve sonrası için geçerli\r\nexport function calculateSalary({ year, grossSalaries, asgariUcret }) {\r\n    const rates = TaxRates.getRates(year);\r\n    const results = [];\r\n    let cumulativeMatrah = 0;\r\n\r\n    for (let i = 0; i < grossSalaries.length; i++) {\r\n        const A = parseFloat(grossSalaries[i]?.toString().replace(',', '.')) || 0;\r\n        const B = A * rates.sgk;\r\n        const C = A * rates.issizlik;\r\n        const D = A - (B + C);\r\n\r\n        // Asgari ücret istisnası (2022 ve sonrası)\r\n        let gelirVergisiMatrah = D;\r\n        let damgaVergisiMatrah = A;\r\n        let asgariUcretMatrah = 0;\r\n        let asgariUcretDamga = 0;\r\n        let I = 0; // Asgari Geçim İndirimi (2022+ yok)\r\n\r\n        if (year >= 2022) {\r\n            // Sadece asgari ücreti aşan matrah vergilendirilecek\r\n            asgariUcretMatrah = Math.min(D, asgariUcret - (asgariUcret * (rates.sgk + rates.issizlik)));\r\n            gelirVergisiMatrah = Math.max(0, D - asgariUcretMatrah);\r\n            asgariUcretDamga = Math.min(A, asgariUcret);\r\n            damgaVergisiMatrah = Math.max(0, A - asgariUcretDamga);\r\n        }\r\n\r\n        // Kümülatif matrah (önceki aylar dahil)\r\n        const G = cumulativeMatrah + D;\r\n\r\n        // Gelir vergisi hesaplama (kademeli)\r\n        let kalanMatrah = gelirVergisiMatrah;\r\n        let E = 0;\r\n        let kalanKumulatif = G - gelirVergisiMatrah;\r\n        for (const dilim of rates.gelir) {\r\n            // Bu dilimde ne kadar matrah var?\r\n            const dilimBas = Math.max(dilim.min, kalanKumulatif);\r\n            const dilimSon = Math.min(dilim.max, kalanKumulatif + kalanMatrah);\r\n            if (dilimSon > dilimBas) {\r\n                const tutar = dilimSon - dilimBas;\r\n                E += tutar * dilim.oran;\r\n                kalanMatrah -= tutar;\r\n                kalanKumulatif += tutar;\r\n            }\r\n            if (kalanMatrah <= 0) break;\r\n        }\r\n\r\n        // Damga vergisi\r\n        const F = damgaVergisiMatrah * rates.damga;\r\n\r\n        // Net maaş\r\n        const H = A - (B + C + E + F);\r\n        // Toplam ele geçen\r\n        const J = H + I;\r\n\r\n        // Sonuçları kaydet\r\n        results.push({\r\n            A, B, C, D, E, F, G, H, I, J\r\n        });\r\n        cumulativeMatrah += D;\r\n    }\r\n    return results;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}