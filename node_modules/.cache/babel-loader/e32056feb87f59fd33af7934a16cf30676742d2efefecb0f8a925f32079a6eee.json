{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\enesk\\\\Desktop\\\\enestream\\\\brutten-nete\\\\src\\\\components\\\\FutureYearForm\\\\FutureYearForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './FutureYearForm.css';\nimport TaxRates from '../../utils/TaxRates';\nimport { ISTISNA } from '../../utils/calculateSalary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FutureYearForm = ({\n  onSubmit,\n  onClose,\n  initialValues = null,\n  savedYears = {}\n}) => {\n  _s();\n  // Eğer initialValues varsa onları kullan, yoksa default değerler\n  const [year, setYear] = useState((initialValues === null || initialValues === void 0 ? void 0 : initialValues.year) || 2026);\n  const [inflation, setInflation] = useState((initialValues === null || initialValues === void 0 ? void 0 : initialValues.inflation) || '');\n  const [baseYear, setBaseYear] = useState(''); // Hangi yılı baz alacağız\n\n  // 2025 verilerini al\n  const rates2025 = TaxRates.getRates(2025);\n\n  // En yüksek yıl olan 2025'in ISTISNA değerlerini al\n  const latestYear = Math.max(...Object.keys(ISTISNA).map(Number));\n  const exemptions2025 = ISTISNA[latestYear];\n  const [taxRates, setTaxRates] = useState((initialValues === null || initialValues === void 0 ? void 0 : initialValues.taxRates) || {\n    sgk: 0.14,\n    issizlik: 0.01,\n    damga: 0.00759,\n    gelir: [{\n      min: 0,\n      max: 158000,\n      oran: 0.15\n    }, {\n      min: 158000,\n      max: 330000,\n      oran: 0.20\n    }, {\n      min: 330000,\n      max: 1200000,\n      oran: 0.27\n    }, {\n      min: 1200000,\n      max: 4300000,\n      oran: 0.35\n    }, {\n      min: 4300000,\n      max: 999999999,\n      oran: 0.40\n    }]\n  });\n  const [exemptions, setExemptions] = useState((initialValues === null || initialValues === void 0 ? void 0 : initialValues.exemptions) || {\n    gelir: exemptions2025.gelir,\n    damga: exemptions2025.damga\n  });\n\n  // Baz yıl seçildiğinde o yılın verilerini yükle\n  const handleBaseYearChange = selectedYear => {\n    setBaseYear(selectedYear);\n    if (selectedYear && savedYears[selectedYear]) {\n      const baseData = savedYears[selectedYear];\n      setTaxRates(baseData.taxRates);\n      setExemptions(baseData.exemptions);\n      setInflation(''); // Enflasyon alanını boş bırak, kullanıcı yeni değer girecek\n    } else if (selectedYear === '2025') {\n      // 2025 default değerlerini yükle\n      setTaxRates({\n        sgk: 0.14,\n        issizlik: 0.01,\n        damga: 0.00759,\n        gelir: rates2025.gelir\n      });\n      setExemptions({\n        gelir: exemptions2025.gelir,\n        damga: exemptions2025.damga\n      });\n      setInflation('');\n    }\n  };\n\n  // Enflasyon oranına göre otomatik doldur\n  const handleInflationChange = value => {\n    setInflation(value);\n    if (value && !isNaN(value)) {\n      const inflationRate = parseFloat(value) / 100;\n\n      // Hangi yılı baz alıyoruz?\n      let baseRates, baseExemptions;\n      if (baseYear && savedYears[baseYear]) {\n        baseRates = savedYears[baseYear].taxRates;\n        baseExemptions = savedYears[baseYear].exemptions;\n      } else {\n        // Default 2025 değerleri\n        baseRates = rates2025;\n        baseExemptions = exemptions2025;\n      }\n\n      // Vergi dilimlerini enflasyon oranına göre güncelle\n      const updatedGelir = baseRates.gelir.map(dilim => ({\n        ...dilim,\n        min: Math.round(dilim.min * (1 + inflationRate)),\n        max: dilim.max === Infinity ? 999999999 : Math.round(dilim.max * (1 + inflationRate))\n      }));\n      setTaxRates({\n        ...baseRates,\n        gelir: updatedGelir\n      });\n\n      // İstisnaları enflasyon oranına göre güncelle\n      setExemptions({\n        gelir: baseExemptions.gelir.map(val => Math.round(val * (1 + inflationRate) * 100) / 100),\n        damga: baseExemptions.damga.map(val => Math.round(val * (1 + inflationRate) * 100) / 100)\n      });\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({\n      year,\n      taxRates,\n      exemptions,\n      inflation\n    });\n    onClose();\n  };\n  const updateGelirDilim = (index, field, value) => {\n    const updatedGelir = [...taxRates.gelir];\n    updatedGelir[index] = {\n      ...updatedGelir[index],\n      [field]: field === 'oran' ? parseFloat(value) / 100 : parseInt(value)\n    };\n    setTaxRates({\n      ...taxRates,\n      gelir: updatedGelir\n    });\n  };\n  const updateExemption = (type, index, value) => {\n    setExemptions({\n      ...exemptions,\n      [type]: exemptions[type].map((val, i) => i === index ? parseFloat(value) : val)\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"future-year-form-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"future-year-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: initialValues ? 'Vergi Oranlarını Düzenle' : 'Gelecek Yıl Hesaplama Ayarları'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: onClose,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-section\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Hesaplama Y\\u0131l\\u0131:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: year,\n              onChange: e => setYear(parseInt(e.target.value)),\n              min: \"2025\",\n              max: \"2050\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), !initialValues && Object.keys(savedYears).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Hangi y\\u0131l\\u0131n verilerini baz almak istiyorsunuz?\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: baseYear,\n              onChange: e => handleBaseYearChange(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"2025 (Varsay\\u0131lan de\\u011Ferler)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 37\n              }, this), Object.keys(savedYears).sort().map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: year,\n                children: [year, \" (\", savedYears[year].inflation ? `%${savedYears[year].inflation} enflasyon` : 'Özel değerler', \")\"]\n              }, year, true, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 41\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"Se\\xE7ilen y\\u0131l\\u0131n vergi oranlar\\u0131 ve istisnalar\\u0131 ba\\u015Flang\\u0131\\xE7 noktas\\u0131 olacak\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Enflasyon Oran\\u0131 (%) - \\u0130ste\\u011Fe Ba\\u011Fl\\u0131:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: inflation,\n              onChange: e => handleInflationChange(e.target.value),\n              placeholder: \"\\xD6rn: 30\",\n              step: \"0.1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: baseYear ? `${baseYear} yılının değerlerini bu oranda arttırır` : '2025 değerlerini otomatik olarak bu oranda arttırır'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Gelir Vergisi Dilimleri\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 25\n          }, this), taxRates.gelir.map((dilim, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dilim-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: dilim.min,\n              onChange: e => updateGelirDilim(index, 'min', e.target.value),\n              placeholder: \"Min\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: dilim.max === 999999999 ? '' : dilim.max,\n              onChange: e => updateGelirDilim(index, 'max', e.target.value || 999999999),\n              placeholder: \"Max (bo\\u015F = s\\u0131n\\u0131rs\\u0131z)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: dilim.oran * 100,\n              onChange: e => updateGelirDilim(index, 'oran', e.target.value),\n              placeholder: \"Oran %\",\n              step: \"0.1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"%\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [latestYear, \" Ayl\\u0131k Gelir Vergisi \\u0130stisnalar\\u0131\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"exemption-grid\",\n            children: ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', 'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'].map((month, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"exemption-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [month, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: exemptions.gelir[index],\n                onChange: e => updateExemption('gelir', index, e.target.value),\n                step: \"0.01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [latestYear, \" Ayl\\u0131k Damga Vergisi \\u0130stisnalar\\u0131\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"exemption-grid\",\n            children: ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', 'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'].map((month, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"exemption-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [month, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: exemptions.damga[index],\n                onChange: e => updateExemption('damga', index, e.target.value),\n                step: \"0.01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: onClose,\n            children: \"\\u0130ptal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: initialValues ? 'Güncellemeleri Uygula' : 'Hesaplamayı Başlat'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 9\n  }, this);\n};\n_s(FutureYearForm, \"SN9hOqfpv8JhMFVrvZy3brkD1RM=\");\n_c = FutureYearForm;\nexport default FutureYearForm;\nvar _c;\n$RefreshReg$(_c, \"FutureYearForm\");","map":{"version":3,"names":["React","useState","useEffect","TaxRates","ISTISNA","jsxDEV","_jsxDEV","FutureYearForm","onSubmit","onClose","initialValues","savedYears","_s","year","setYear","inflation","setInflation","baseYear","setBaseYear","rates2025","getRates","latestYear","Math","max","Object","keys","map","Number","exemptions2025","taxRates","setTaxRates","sgk","issizlik","damga","gelir","min","oran","exemptions","setExemptions","handleBaseYearChange","selectedYear","baseData","handleInflationChange","value","isNaN","inflationRate","parseFloat","baseRates","baseExemptions","updatedGelir","dilim","round","Infinity","val","handleSubmit","e","preventDefault","updateGelirDilim","index","field","parseInt","updateExemption","type","i","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","target","length","sort","placeholder","step","month","_c","$RefreshReg$"],"sources":["C:/Users/enesk/Desktop/enestream/brutten-nete/src/components/FutureYearForm/FutureYearForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './FutureYearForm.css';\r\nimport TaxRates from '../../utils/TaxRates';\r\nimport { ISTISNA } from '../../utils/calculateSalary';\r\n\r\nconst FutureYearForm = ({ onSubmit, onClose, initialValues = null, savedYears = {} }) => {\r\n    // Eğer initialValues varsa onları kullan, yoksa default değerler\r\n    const [year, setYear] = useState(initialValues?.year || 2026);\r\n    const [inflation, setInflation] = useState(initialValues?.inflation || '');\r\n    const [baseYear, setBaseYear] = useState(''); // Hangi yılı baz alacağız\r\n\r\n    // 2025 verilerini al\r\n    const rates2025 = TaxRates.getRates(2025);\r\n\r\n    // En yüksek yıl olan 2025'in ISTISNA değerlerini al\r\n    const latestYear = Math.max(...Object.keys(ISTISNA).map(Number));\r\n    const exemptions2025 = ISTISNA[latestYear];\r\n\r\n    const [taxRates, setTaxRates] = useState(\r\n        initialValues?.taxRates || {\r\n            sgk: 0.14,\r\n            issizlik: 0.01,\r\n            damga: 0.00759,\r\n            gelir: [\r\n                { min: 0, max: 158000, oran: 0.15 },\r\n                { min: 158000, max: 330000, oran: 0.20 },\r\n                { min: 330000, max: 1200000, oran: 0.27 },\r\n                { min: 1200000, max: 4300000, oran: 0.35 },\r\n                { min: 4300000, max: 999999999, oran: 0.40 }\r\n            ]\r\n        }\r\n    );\r\n\r\n    const [exemptions, setExemptions] = useState(\r\n        initialValues?.exemptions || {\r\n            gelir: exemptions2025.gelir,\r\n            damga: exemptions2025.damga\r\n        }\r\n    );\r\n\r\n    // Baz yıl seçildiğinde o yılın verilerini yükle\r\n    const handleBaseYearChange = (selectedYear) => {\r\n        setBaseYear(selectedYear);\r\n\r\n        if (selectedYear && savedYears[selectedYear]) {\r\n            const baseData = savedYears[selectedYear];\r\n            setTaxRates(baseData.taxRates);\r\n            setExemptions(baseData.exemptions);\r\n            setInflation(''); // Enflasyon alanını boş bırak, kullanıcı yeni değer girecek\r\n        } else if (selectedYear === '2025') {\r\n            // 2025 default değerlerini yükle\r\n            setTaxRates({\r\n                sgk: 0.14,\r\n                issizlik: 0.01,\r\n                damga: 0.00759,\r\n                gelir: rates2025.gelir\r\n            });\r\n            setExemptions({\r\n                gelir: exemptions2025.gelir,\r\n                damga: exemptions2025.damga\r\n            });\r\n            setInflation('');\r\n        }\r\n    };\r\n\r\n    // Enflasyon oranına göre otomatik doldur\r\n    const handleInflationChange = (value) => {\r\n        setInflation(value);\r\n\r\n        if (value && !isNaN(value)) {\r\n            const inflationRate = parseFloat(value) / 100;\r\n\r\n            // Hangi yılı baz alıyoruz?\r\n            let baseRates, baseExemptions;\r\n\r\n            if (baseYear && savedYears[baseYear]) {\r\n                baseRates = savedYears[baseYear].taxRates;\r\n                baseExemptions = savedYears[baseYear].exemptions;\r\n            } else {\r\n                // Default 2025 değerleri\r\n                baseRates = rates2025;\r\n                baseExemptions = exemptions2025;\r\n            }\r\n\r\n            // Vergi dilimlerini enflasyon oranına göre güncelle\r\n            const updatedGelir = baseRates.gelir.map(dilim => ({\r\n                ...dilim,\r\n                min: Math.round(dilim.min * (1 + inflationRate)),\r\n                max: dilim.max === Infinity ? 999999999 : Math.round(dilim.max * (1 + inflationRate))\r\n            }));\r\n\r\n            setTaxRates({\r\n                ...baseRates,\r\n                gelir: updatedGelir\r\n            });\r\n\r\n            // İstisnaları enflasyon oranına göre güncelle\r\n            setExemptions({\r\n                gelir: baseExemptions.gelir.map(val => Math.round(val * (1 + inflationRate) * 100) / 100),\r\n                damga: baseExemptions.damga.map(val => Math.round(val * (1 + inflationRate) * 100) / 100)\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        onSubmit({\r\n            year,\r\n            taxRates,\r\n            exemptions,\r\n            inflation\r\n        });\r\n        onClose();\r\n    };\r\n\r\n    const updateGelirDilim = (index, field, value) => {\r\n        const updatedGelir = [...taxRates.gelir];\r\n        updatedGelir[index] = {\r\n            ...updatedGelir[index],\r\n            [field]: field === 'oran' ? parseFloat(value) / 100 : parseInt(value)\r\n        };\r\n        setTaxRates({\r\n            ...taxRates,\r\n            gelir: updatedGelir\r\n        });\r\n    };\r\n\r\n    const updateExemption = (type, index, value) => {\r\n        setExemptions({\r\n            ...exemptions,\r\n            [type]: exemptions[type].map((val, i) => i === index ? parseFloat(value) : val)\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"future-year-form-overlay\">\r\n            <div className=\"future-year-form\">\r\n                <div className=\"form-header\">\r\n                    <h2>{initialValues ? 'Vergi Oranlarını Düzenle' : 'Gelecek Yıl Hesaplama Ayarları'}</h2>\r\n                    <button className=\"close-btn\" onClick={onClose}>×</button>\r\n                </div>\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"form-section\">\r\n                        <label>\r\n                            Hesaplama Yılı:\r\n                            <input\r\n                                type=\"number\"\r\n                                value={year}\r\n                                onChange={(e) => setYear(parseInt(e.target.value))}\r\n                                min=\"2025\"\r\n                                max=\"2050\"\r\n                            />\r\n                        </label>\r\n                    </div>\r\n\r\n                    {/* Baz yıl seçme - sadece yeni yıl eklerken görün */}\r\n                    {!initialValues && Object.keys(savedYears).length > 0 && (\r\n                        <div className=\"form-section\">\r\n                            <label>\r\n                                Hangi yılın verilerini baz almak istiyorsunuz?\r\n                                <select\r\n                                    value={baseYear}\r\n                                    onChange={(e) => handleBaseYearChange(e.target.value)}\r\n                                >\r\n                                    <option value=\"\">2025 (Varsayılan değerler)</option>\r\n                                    {Object.keys(savedYears).sort().map(year => (\r\n                                        <option key={year} value={year}>\r\n                                            {year} ({savedYears[year].inflation ? `%${savedYears[year].inflation} enflasyon` : 'Özel değerler'})\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </label>\r\n                            <small>Seçilen yılın vergi oranları ve istisnaları başlangıç noktası olacak</small>\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className=\"form-section\">\r\n                        <label>\r\n                            Enflasyon Oranı (%) - İsteğe Bağlı:\r\n                            <input\r\n                                type=\"number\"\r\n                                value={inflation}\r\n                                onChange={(e) => handleInflationChange(e.target.value)}\r\n                                placeholder=\"Örn: 30\"\r\n                                step=\"0.1\"\r\n                            />\r\n                        </label>\r\n                        <small>{baseYear ? `${baseYear} yılının değerlerini bu oranda arttırır` : '2025 değerlerini otomatik olarak bu oranda arttırır'}</small>\r\n                    </div>\r\n\r\n                    <div className=\"form-section\">\r\n                        <h3>Gelir Vergisi Dilimleri</h3>\r\n                        {taxRates.gelir.map((dilim, index) => (\r\n                            <div key={index} className=\"dilim-row\">\r\n                                <input\r\n                                    type=\"number\"\r\n                                    value={dilim.min}\r\n                                    onChange={(e) => updateGelirDilim(index, 'min', e.target.value)}\r\n                                    placeholder=\"Min\"\r\n                                />\r\n                                <span>-</span>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    value={dilim.max === 999999999 ? '' : dilim.max}\r\n                                    onChange={(e) => updateGelirDilim(index, 'max', e.target.value || 999999999)}\r\n                                    placeholder=\"Max (boş = sınırsız)\"\r\n                                />\r\n                                <input\r\n                                    type=\"number\"\r\n                                    value={dilim.oran * 100}\r\n                                    onChange={(e) => updateGelirDilim(index, 'oran', e.target.value)}\r\n                                    placeholder=\"Oran %\"\r\n                                    step=\"0.1\"\r\n                                />\r\n                                <span>%</span>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <div className=\"form-section\">\r\n                        <h3>{latestYear} Aylık Gelir Vergisi İstisnaları</h3>\r\n                        <div className=\"exemption-grid\">\r\n                            {['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran',\r\n                                'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'].map((month, index) => (\r\n                                    <div key={index} className=\"exemption-item\">\r\n                                        <label>{month}:</label>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            value={exemptions.gelir[index]}\r\n                                            onChange={(e) => updateExemption('gelir', index, e.target.value)}\r\n                                            step=\"0.01\"\r\n                                        />\r\n                                    </div>\r\n                                ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-section\">\r\n                        <h3>{latestYear} Aylık Damga Vergisi İstisnaları</h3>\r\n                        <div className=\"exemption-grid\">\r\n                            {['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran',\r\n                                'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'].map((month, index) => (\r\n                                    <div key={index} className=\"exemption-item\">\r\n                                        <label>{month}:</label>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            value={exemptions.damga[index]}\r\n                                            onChange={(e) => updateExemption('damga', index, e.target.value)}\r\n                                            step=\"0.01\"\r\n                                        />\r\n                                    </div>\r\n                                ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-actions\">\r\n                        <button type=\"button\" onClick={onClose}>İptal</button>\r\n                        <button type=\"submit\">\r\n                            {initialValues ? 'Güncellemeleri Uygula' : 'Hesaplamayı Başlat'}\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FutureYearForm; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}