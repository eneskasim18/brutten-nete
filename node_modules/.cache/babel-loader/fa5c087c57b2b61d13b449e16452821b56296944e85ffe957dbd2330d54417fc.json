{"ast":null,"code":"import TaxRates from './TaxRates';\n\n// SGK tavanı: asgari ücret * 7.5 (genellikle)\nfunction getSgkTavan(year, asgariUcret) {\n  // İleride yıl bazlı değişiklik olursa buradan güncellenebilir\n  return asgariUcret * 7.5;\n}\n\n// Asgari ücret istisnası 2022 ve sonrası için geçerli\nexport function calculateSalary({\n  year,\n  grossSalaries,\n  asgariUcret\n}) {\n  const rates = TaxRates.getRates(year);\n  const results = [];\n  let cumulativeMatrah = 0;\n  const sgkTavan = getSgkTavan(year, asgariUcret);\n\n  // Asgari ücretin matrahı (her ay için):\n  const asgariMatrah = asgariUcret - asgariUcret * (rates.sgk + rates.issizlik);\n  for (let i = 0; i < grossSalaries.length; i++) {\n    var _grossSalaries$i;\n    const A = parseFloat((_grossSalaries$i = grossSalaries[i]) === null || _grossSalaries$i === void 0 ? void 0 : _grossSalaries$i.toString().replace(',', '.')) || 0;\n    // SGK ve işsizlik için tavan uygula\n    const sgkMatrah = Math.min(A, sgkTavan);\n    const B = sgkMatrah * rates.sgk;\n    const C = sgkMatrah * rates.issizlik;\n    const D = A - (B + C);\n\n    // Asgari ücret istisnası (2022 ve sonrası)\n    let gelirVergisiMatrah = D;\n    let damgaVergisiMatrah = A;\n    let I = 0; // Asgari Geçim İndirimi (2022+ yok)\n\n    if (year >= 2022) {\n      // Her ay asgari matrah kadar gelir vergisinden istisna\n      gelirVergisiMatrah = Math.max(0, D - asgariMatrah);\n      damgaVergisiMatrah = Math.max(0, A - asgariUcret);\n    }\n\n    // Kümülatif matrah (önceki aylar dahil)\n    const G = cumulativeMatrah + D;\n\n    // Gelir vergisi hesaplama (kademeli)\n    let kalanMatrah = gelirVergisiMatrah;\n    let E = 0;\n    let kalanKumulatif = G - gelirVergisiMatrah;\n    for (const dilim of rates.gelir) {\n      const dilimBas = Math.max(dilim.min, kalanKumulatif);\n      const dilimSon = Math.min(dilim.max, kalanKumulatif + kalanMatrah);\n      if (dilimSon > dilimBas) {\n        const tutar = dilimSon - dilimBas;\n        E += tutar * dilim.oran;\n        kalanMatrah -= tutar;\n        kalanKumulatif += tutar;\n      }\n      if (kalanMatrah <= 0) break;\n    }\n\n    // Damga vergisi\n    const F = damgaVergisiMatrah * rates.damga;\n\n    // Net maaş\n    const H = A - (B + C + E + F);\n    // Toplam ele geçen\n    const J = H + I;\n\n    // Hangi dilimde?\n    let aktifDilim = rates.gelir.find(dilim => G > dilim.min && G <= dilim.max) || rates.gelir[rates.gelir.length - 1];\n    let dilimStr = `%${Math.round(aktifDilim.oran * 100)}`;\n    results.push({\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H,\n      I,\n      J,\n      dilim: dilimStr\n    });\n    cumulativeMatrah += D;\n  }\n  return results;\n}","map":{"version":3,"names":["TaxRates","getSgkTavan","year","asgariUcret","calculateSalary","grossSalaries","rates","getRates","results","cumulativeMatrah","sgkTavan","asgariMatrah","sgk","issizlik","i","length","_grossSalaries$i","A","parseFloat","toString","replace","sgkMatrah","Math","min","B","C","D","gelirVergisiMatrah","damgaVergisiMatrah","I","max","G","kalanMatrah","E","kalanKumulatif","dilim","gelir","dilimBas","dilimSon","tutar","oran","F","damga","H","J","aktifDilim","find","dilimStr","round","push"],"sources":["C:/Users/enesk/Desktop/enestream/brutten-nete/src/utils/calculateSalary.js"],"sourcesContent":["import TaxRates from './TaxRates';\r\n\r\n// SGK tavanı: asgari ücret * 7.5 (genellikle)\r\nfunction getSgkTavan(year, asgariUcret) {\r\n    // İleride yıl bazlı değişiklik olursa buradan güncellenebilir\r\n    return asgariUcret * 7.5;\r\n}\r\n\r\n// Asgari ücret istisnası 2022 ve sonrası için geçerli\r\nexport function calculateSalary({ year, grossSalaries, asgariUcret }) {\r\n    const rates = TaxRates.getRates(year);\r\n    const results = [];\r\n    let cumulativeMatrah = 0;\r\n    const sgkTavan = getSgkTavan(year, asgariUcret);\r\n\r\n    // Asgari ücretin matrahı (her ay için):\r\n    const asgariMatrah = asgariUcret - (asgariUcret * (rates.sgk + rates.issizlik));\r\n\r\n    for (let i = 0; i < grossSalaries.length; i++) {\r\n        const A = parseFloat(grossSalaries[i]?.toString().replace(',', '.')) || 0;\r\n        // SGK ve işsizlik için tavan uygula\r\n        const sgkMatrah = Math.min(A, sgkTavan);\r\n        const B = sgkMatrah * rates.sgk;\r\n        const C = sgkMatrah * rates.issizlik;\r\n        const D = A - (B + C);\r\n\r\n        // Asgari ücret istisnası (2022 ve sonrası)\r\n        let gelirVergisiMatrah = D;\r\n        let damgaVergisiMatrah = A;\r\n        let I = 0; // Asgari Geçim İndirimi (2022+ yok)\r\n\r\n        if (year >= 2022) {\r\n            // Her ay asgari matrah kadar gelir vergisinden istisna\r\n            gelirVergisiMatrah = Math.max(0, D - asgariMatrah);\r\n            damgaVergisiMatrah = Math.max(0, A - asgariUcret);\r\n        }\r\n\r\n        // Kümülatif matrah (önceki aylar dahil)\r\n        const G = cumulativeMatrah + D;\r\n\r\n        // Gelir vergisi hesaplama (kademeli)\r\n        let kalanMatrah = gelirVergisiMatrah;\r\n        let E = 0;\r\n        let kalanKumulatif = G - gelirVergisiMatrah;\r\n        for (const dilim of rates.gelir) {\r\n            const dilimBas = Math.max(dilim.min, kalanKumulatif);\r\n            const dilimSon = Math.min(dilim.max, kalanKumulatif + kalanMatrah);\r\n            if (dilimSon > dilimBas) {\r\n                const tutar = dilimSon - dilimBas;\r\n                E += tutar * dilim.oran;\r\n                kalanMatrah -= tutar;\r\n                kalanKumulatif += tutar;\r\n            }\r\n            if (kalanMatrah <= 0) break;\r\n        }\r\n\r\n        // Damga vergisi\r\n        const F = damgaVergisiMatrah * rates.damga;\r\n\r\n        // Net maaş\r\n        const H = A - (B + C + E + F);\r\n        // Toplam ele geçen\r\n        const J = H + I;\r\n\r\n        // Hangi dilimde?\r\n        let aktifDilim = rates.gelir.find(dilim => G > dilim.min && G <= dilim.max) || rates.gelir[rates.gelir.length - 1];\r\n        let dilimStr = `%${Math.round(aktifDilim.oran * 100)}`;\r\n\r\n        results.push({\r\n            A, B, C, D, E, F, G, H, I, J, dilim: dilimStr\r\n        });\r\n        cumulativeMatrah += D;\r\n    }\r\n    return results;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}