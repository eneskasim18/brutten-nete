{"ast":null,"code":"import TaxRates from './TaxRates';\n\n// SGK tavanı: asgari ücret * 7.5 (genellikle)\nfunction getSgkTavan(year, asgariUcret) {\n  // İleride yıl bazlı değişiklik olursa buradan güncellenebilir\n  return asgariUcret * 7.5;\n}\n\n// Yıllara göre devletin açıkladığı aylık gelir ve damga vergisi istisnaları\nconst ISTISNA = {\n  2023: {\n    gelir: [1919.00, 1919.00, 1919.00, 1919.00, 1919.00, 1919.00, 1919.00, 1919.00, 1919.00, 1919.00, 1919.00, 1919.00],\n    damga: [137.34, 137.34, 137.34, 137.34, 137.34, 137.34, 137.34, 137.34, 137.34, 137.34, 137.34, 137.34]\n  },\n  2024: {\n    gelir: [2336.53, 2336.53, 2336.53, 2336.53, 2336.53, 2336.53, 2336.53, 2336.53, 2336.53, 2336.53, 2336.53, 2336.53],\n    damga: [167.03, 167.03, 167.03, 167.03, 167.03, 167.03, 167.03, 167.03, 167.03, 167.03, 167.03, 167.03]\n  },\n  2025: {\n    gelir: [3315.70, 3315.70, 3315.70, 3315.70, 3315.70, 3315.70, 3315.70, 4257.57, 4420.93, 4420.93, 4420.93, 4420.93],\n    damga: [197.38, 197.38, 197.38, 197.38, 197.38, 197.38, 197.38, 197.38, 197.38, 197.38, 197.38, 197.38]\n  }\n};\n\n// Asgari ücret istisnası 2022 ve sonrası için geçerli\nexport function calculateSalary({\n  year,\n  grossSalaries,\n  asgariUcret\n}) {\n  const rates = TaxRates.getRates(year);\n  const results = [];\n  let cumulativeMatrah = 0;\n  const sgkTavan = getSgkTavan(year, asgariUcret);\n\n  // Asgari ücretin matrahı (her ay için):\n  const asgariMatrahAy = asgariUcret - asgariUcret * (rates.sgk + rates.issizlik);\n  const toplamAsgariMatrah = asgariMatrahAy * 12;\n  let kalanAsgariMatrah = toplamAsgariMatrah;\n  for (let i = 0; i < grossSalaries.length; i++) {\n    var _grossSalaries$i;\n    const A = parseFloat((_grossSalaries$i = grossSalaries[i]) === null || _grossSalaries$i === void 0 ? void 0 : _grossSalaries$i.toString().replace(',', '.')) || 0;\n    // SGK ve işsizlik için tavan uygula\n    const sgkMatrah = Math.min(A, sgkTavan);\n    const B = Math.round(sgkMatrah * rates.sgk * 100) / 100;\n    const C = Math.round(sgkMatrah * rates.issizlik * 100) / 100;\n    const D = Math.round((A - (B + C)) * 100) / 100;\n\n    // İlgili yıl için devletin açıkladığı istisna tutarlarını kullan\n    let gelirVergisiMatrah = D;\n    let damgaVergisiMatrah = A;\n    let I = 0; // Asgari Geçim İndirimi (2022+ yok)\n\n    if (ISTISNA[year]) {\n      gelirVergisiMatrah = Math.max(0, D - ISTISNA[year].gelir[i]);\n      damgaVergisiMatrah = Math.max(0, A - ISTISNA[year].damga[i]);\n    } else if (year >= 2022) {\n      // Eski mantık: asgari ücretin matrahı kadar istisna\n      const asgariMatrah = asgariUcret - asgariUcret * (rates.sgk + rates.issizlik);\n      gelirVergisiMatrah = Math.max(0, D - asgariMatrah);\n      damgaVergisiMatrah = Math.max(0, A - asgariUcret);\n    }\n\n    // Kümülatif matrah (önceki aylar dahil)\n    const G = cumulativeMatrah + D;\n\n    // Gelir vergisi hesaplama (kademeli)\n    let kalanMatrah = gelirVergisiMatrah;\n    let E = 0;\n    let kalanKumulatif = G - gelirVergisiMatrah;\n    let usedDilims = [];\n    for (const dilim of rates.gelir) {\n      const dilimBas = Math.max(dilim.min, kalanKumulatif);\n      const dilimSon = Math.min(dilim.max, kalanKumulatif + kalanMatrah);\n      if (dilimSon > dilimBas) {\n        usedDilims.push(dilim);\n        const tutar = dilimSon - dilimBas;\n        E += tutar * dilim.oran;\n        kalanMatrah -= tutar;\n        kalanKumulatif += tutar;\n      }\n      if (kalanMatrah <= 0) break;\n    }\n    E = Math.round(E * 100) / 100;\n\n    // Damga vergisi\n    let F;\n    if (ISTISNA[year]) {\n      F = Math.max(0, Math.round((A * rates.damga - ISTISNA[year].damga[i]) * 100) / 100);\n    } else {\n      F = Math.round(A * rates.damga * 100) / 100;\n    }\n\n    // İstisnalar hesaplanan vergi tutarından düşülmeli\n    if (ISTISNA[year]) {\n      E = Math.max(0, E - ISTISNA[year].gelir[i]);\n      F = Math.max(0, F - ISTISNA[year].damga[i]);\n    }\n\n    // Net maaş\n    const H = Math.round((A - (B + C + E + F)) * 100) / 100;\n    // Toplam ele geçen\n    const J = Math.round((H + I) * 100) / 100;\n\n    // Hangi dilim(ler)de?\n    let dilimStr = '-';\n    if (usedDilims.length > 0) {\n      const minDilim = Math.min(...usedDilims.map(d => d.oran));\n      const maxDilim = Math.max(...usedDilims.map(d => d.oran));\n      if (minDilim === maxDilim) {\n        dilimStr = `%${Math.round(minDilim * 100)}`;\n      } else {\n        dilimStr = `%${Math.round(minDilim * 100)}-%${Math.round(maxDilim * 100)}`;\n      }\n    }\n    results.push({\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      G,\n      H,\n      I,\n      J,\n      dilim: dilimStr\n    });\n    cumulativeMatrah += D;\n  }\n  return results;\n}","map":{"version":3,"names":["TaxRates","getSgkTavan","year","asgariUcret","ISTISNA","gelir","damga","calculateSalary","grossSalaries","rates","getRates","results","cumulativeMatrah","sgkTavan","asgariMatrahAy","sgk","issizlik","toplamAsgariMatrah","kalanAsgariMatrah","i","length","_grossSalaries$i","A","parseFloat","toString","replace","sgkMatrah","Math","min","B","round","C","D","gelirVergisiMatrah","damgaVergisiMatrah","I","max","asgariMatrah","G","kalanMatrah","E","kalanKumulatif","usedDilims","dilim","dilimBas","dilimSon","push","tutar","oran","F","H","J","dilimStr","minDilim","map","d","maxDilim"],"sources":["C:/Users/enesk/Desktop/enestream/brutten-nete/src/utils/calculateSalary.js"],"sourcesContent":["import TaxRates from './TaxRates';\r\n\r\n// SGK tavanı: asgari ücret * 7.5 (genellikle)\r\nfunction getSgkTavan(year, asgariUcret) {\r\n    // İleride yıl bazlı değişiklik olursa buradan güncellenebilir\r\n    return asgariUcret * 7.5;\r\n}\r\n\r\n// Yıllara göre devletin açıkladığı aylık gelir ve damga vergisi istisnaları\r\nconst ISTISNA = {\r\n    2023: {\r\n        gelir: [1919.00, 1919.00, 1919.00, 1919.00, 1919.00, 1919.00, 1919.00, 1919.00, 1919.00, 1919.00, 1919.00, 1919.00],\r\n        damga: [137.34, 137.34, 137.34, 137.34, 137.34, 137.34, 137.34, 137.34, 137.34, 137.34, 137.34, 137.34]\r\n    },\r\n    2024: {\r\n        gelir: [2336.53, 2336.53, 2336.53, 2336.53, 2336.53, 2336.53, 2336.53, 2336.53, 2336.53, 2336.53, 2336.53, 2336.53],\r\n        damga: [167.03, 167.03, 167.03, 167.03, 167.03, 167.03, 167.03, 167.03, 167.03, 167.03, 167.03, 167.03]\r\n    },\r\n    2025: {\r\n        gelir: [3315.70, 3315.70, 3315.70, 3315.70, 3315.70, 3315.70, 3315.70, 4257.57, 4420.93, 4420.93, 4420.93, 4420.93],\r\n        damga: [197.38, 197.38, 197.38, 197.38, 197.38, 197.38, 197.38, 197.38, 197.38, 197.38, 197.38, 197.38]\r\n    }\r\n};\r\n\r\n// Asgari ücret istisnası 2022 ve sonrası için geçerli\r\nexport function calculateSalary({ year, grossSalaries, asgariUcret }) {\r\n    const rates = TaxRates.getRates(year);\r\n    const results = [];\r\n    let cumulativeMatrah = 0;\r\n    const sgkTavan = getSgkTavan(year, asgariUcret);\r\n\r\n    // Asgari ücretin matrahı (her ay için):\r\n    const asgariMatrahAy = asgariUcret - (asgariUcret * (rates.sgk + rates.issizlik));\r\n    const toplamAsgariMatrah = asgariMatrahAy * 12;\r\n    let kalanAsgariMatrah = toplamAsgariMatrah;\r\n\r\n    for (let i = 0; i < grossSalaries.length; i++) {\r\n        const A = parseFloat(grossSalaries[i]?.toString().replace(',', '.')) || 0;\r\n        // SGK ve işsizlik için tavan uygula\r\n        const sgkMatrah = Math.min(A, sgkTavan);\r\n        const B = Math.round(sgkMatrah * rates.sgk * 100) / 100;\r\n        const C = Math.round(sgkMatrah * rates.issizlik * 100) / 100;\r\n        const D = Math.round((A - (B + C)) * 100) / 100;\r\n\r\n        // İlgili yıl için devletin açıkladığı istisna tutarlarını kullan\r\n        let gelirVergisiMatrah = D;\r\n        let damgaVergisiMatrah = A;\r\n        let I = 0; // Asgari Geçim İndirimi (2022+ yok)\r\n\r\n        if (ISTISNA[year]) {\r\n            gelirVergisiMatrah = Math.max(0, D - ISTISNA[year].gelir[i]);\r\n            damgaVergisiMatrah = Math.max(0, A - ISTISNA[year].damga[i]);\r\n        } else if (year >= 2022) {\r\n            // Eski mantık: asgari ücretin matrahı kadar istisna\r\n            const asgariMatrah = asgariUcret - (asgariUcret * (rates.sgk + rates.issizlik));\r\n            gelirVergisiMatrah = Math.max(0, D - asgariMatrah);\r\n            damgaVergisiMatrah = Math.max(0, A - asgariUcret);\r\n        }\r\n\r\n        // Kümülatif matrah (önceki aylar dahil)\r\n        const G = cumulativeMatrah + D;\r\n\r\n        // Gelir vergisi hesaplama (kademeli)\r\n        let kalanMatrah = gelirVergisiMatrah;\r\n        let E = 0;\r\n        let kalanKumulatif = G - gelirVergisiMatrah;\r\n        let usedDilims = [];\r\n        for (const dilim of rates.gelir) {\r\n            const dilimBas = Math.max(dilim.min, kalanKumulatif);\r\n            const dilimSon = Math.min(dilim.max, kalanKumulatif + kalanMatrah);\r\n            if (dilimSon > dilimBas) {\r\n                usedDilims.push(dilim);\r\n                const tutar = dilimSon - dilimBas;\r\n                E += tutar * dilim.oran;\r\n                kalanMatrah -= tutar;\r\n                kalanKumulatif += tutar;\r\n            }\r\n            if (kalanMatrah <= 0) break;\r\n        }\r\n        E = Math.round(E * 100) / 100;\r\n\r\n        // Damga vergisi\r\n        let F;\r\n        if (ISTISNA[year]) {\r\n            F = Math.max(0, Math.round((A * rates.damga - ISTISNA[year].damga[i]) * 100) / 100);\r\n        } else {\r\n            F = Math.round(A * rates.damga * 100) / 100;\r\n        }\r\n\r\n        // İstisnalar hesaplanan vergi tutarından düşülmeli\r\n        if (ISTISNA[year]) {\r\n            E = Math.max(0, E - ISTISNA[year].gelir[i]);\r\n            F = Math.max(0, F - ISTISNA[year].damga[i]);\r\n        }\r\n\r\n        // Net maaş\r\n        const H = Math.round((A - (B + C + E + F)) * 100) / 100;\r\n        // Toplam ele geçen\r\n        const J = Math.round((H + I) * 100) / 100;\r\n\r\n        // Hangi dilim(ler)de?\r\n        let dilimStr = '-';\r\n        if (usedDilims.length > 0) {\r\n            const minDilim = Math.min(...usedDilims.map(d => d.oran));\r\n            const maxDilim = Math.max(...usedDilims.map(d => d.oran));\r\n            if (minDilim === maxDilim) {\r\n                dilimStr = `%${Math.round(minDilim * 100)}`;\r\n            } else {\r\n                dilimStr = `%${Math.round(minDilim * 100)}-%${Math.round(maxDilim * 100)}`;\r\n            }\r\n        }\r\n\r\n        results.push({\r\n            A, B, C, D, E, F, G, H, I, J, dilim: dilimStr\r\n        });\r\n        cumulativeMatrah += D;\r\n    }\r\n    return results;\r\n} "],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;;AAEjC;AACA,SAASC,WAAWA,CAACC,IAAI,EAAEC,WAAW,EAAE;EACpC;EACA,OAAOA,WAAW,GAAG,GAAG;AAC5B;;AAEA;AACA,MAAMC,OAAO,GAAG;EACZ,IAAI,EAAE;IACFC,KAAK,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;IACnHC,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;EAC1G,CAAC;EACD,IAAI,EAAE;IACFD,KAAK,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;IACnHC,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;EAC1G,CAAC;EACD,IAAI,EAAE;IACFD,KAAK,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;IACnHC,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;EAC1G;AACJ,CAAC;;AAED;AACA,OAAO,SAASC,eAAeA,CAAC;EAAEL,IAAI;EAAEM,aAAa;EAAEL;AAAY,CAAC,EAAE;EAClE,MAAMM,KAAK,GAAGT,QAAQ,CAACU,QAAQ,CAACR,IAAI,CAAC;EACrC,MAAMS,OAAO,GAAG,EAAE;EAClB,IAAIC,gBAAgB,GAAG,CAAC;EACxB,MAAMC,QAAQ,GAAGZ,WAAW,CAACC,IAAI,EAAEC,WAAW,CAAC;;EAE/C;EACA,MAAMW,cAAc,GAAGX,WAAW,GAAIA,WAAW,IAAIM,KAAK,CAACM,GAAG,GAAGN,KAAK,CAACO,QAAQ,CAAE;EACjF,MAAMC,kBAAkB,GAAGH,cAAc,GAAG,EAAE;EAC9C,IAAII,iBAAiB,GAAGD,kBAAkB;EAE1C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,aAAa,CAACY,MAAM,EAAED,CAAC,EAAE,EAAE;IAAA,IAAAE,gBAAA;IAC3C,MAAMC,CAAC,GAAGC,UAAU,EAAAF,gBAAA,GAACb,aAAa,CAACW,CAAC,CAAC,cAAAE,gBAAA,uBAAhBA,gBAAA,CAAkBG,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC;IACzE;IACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACN,CAAC,EAAET,QAAQ,CAAC;IACvC,MAAMgB,CAAC,GAAGF,IAAI,CAACG,KAAK,CAACJ,SAAS,GAAGjB,KAAK,CAACM,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG;IACvD,MAAMgB,CAAC,GAAGJ,IAAI,CAACG,KAAK,CAACJ,SAAS,GAAGjB,KAAK,CAACO,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG;IAC5D,MAAMgB,CAAC,GAAGL,IAAI,CAACG,KAAK,CAAC,CAACR,CAAC,IAAIO,CAAC,GAAGE,CAAC,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG;;IAE/C;IACA,IAAIE,kBAAkB,GAAGD,CAAC;IAC1B,IAAIE,kBAAkB,GAAGZ,CAAC;IAC1B,IAAIa,CAAC,GAAG,CAAC,CAAC,CAAC;;IAEX,IAAI/B,OAAO,CAACF,IAAI,CAAC,EAAE;MACf+B,kBAAkB,GAAGN,IAAI,CAACS,GAAG,CAAC,CAAC,EAAEJ,CAAC,GAAG5B,OAAO,CAACF,IAAI,CAAC,CAACG,KAAK,CAACc,CAAC,CAAC,CAAC;MAC5De,kBAAkB,GAAGP,IAAI,CAACS,GAAG,CAAC,CAAC,EAAEd,CAAC,GAAGlB,OAAO,CAACF,IAAI,CAAC,CAACI,KAAK,CAACa,CAAC,CAAC,CAAC;IAChE,CAAC,MAAM,IAAIjB,IAAI,IAAI,IAAI,EAAE;MACrB;MACA,MAAMmC,YAAY,GAAGlC,WAAW,GAAIA,WAAW,IAAIM,KAAK,CAACM,GAAG,GAAGN,KAAK,CAACO,QAAQ,CAAE;MAC/EiB,kBAAkB,GAAGN,IAAI,CAACS,GAAG,CAAC,CAAC,EAAEJ,CAAC,GAAGK,YAAY,CAAC;MAClDH,kBAAkB,GAAGP,IAAI,CAACS,GAAG,CAAC,CAAC,EAAEd,CAAC,GAAGnB,WAAW,CAAC;IACrD;;IAEA;IACA,MAAMmC,CAAC,GAAG1B,gBAAgB,GAAGoB,CAAC;;IAE9B;IACA,IAAIO,WAAW,GAAGN,kBAAkB;IACpC,IAAIO,CAAC,GAAG,CAAC;IACT,IAAIC,cAAc,GAAGH,CAAC,GAAGL,kBAAkB;IAC3C,IAAIS,UAAU,GAAG,EAAE;IACnB,KAAK,MAAMC,KAAK,IAAIlC,KAAK,CAACJ,KAAK,EAAE;MAC7B,MAAMuC,QAAQ,GAAGjB,IAAI,CAACS,GAAG,CAACO,KAAK,CAACf,GAAG,EAAEa,cAAc,CAAC;MACpD,MAAMI,QAAQ,GAAGlB,IAAI,CAACC,GAAG,CAACe,KAAK,CAACP,GAAG,EAAEK,cAAc,GAAGF,WAAW,CAAC;MAClE,IAAIM,QAAQ,GAAGD,QAAQ,EAAE;QACrBF,UAAU,CAACI,IAAI,CAACH,KAAK,CAAC;QACtB,MAAMI,KAAK,GAAGF,QAAQ,GAAGD,QAAQ;QACjCJ,CAAC,IAAIO,KAAK,GAAGJ,KAAK,CAACK,IAAI;QACvBT,WAAW,IAAIQ,KAAK;QACpBN,cAAc,IAAIM,KAAK;MAC3B;MACA,IAAIR,WAAW,IAAI,CAAC,EAAE;IAC1B;IACAC,CAAC,GAAGb,IAAI,CAACG,KAAK,CAACU,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;;IAE7B;IACA,IAAIS,CAAC;IACL,IAAI7C,OAAO,CAACF,IAAI,CAAC,EAAE;MACf+C,CAAC,GAAGtB,IAAI,CAACS,GAAG,CAAC,CAAC,EAAET,IAAI,CAACG,KAAK,CAAC,CAACR,CAAC,GAAGb,KAAK,CAACH,KAAK,GAAGF,OAAO,CAACF,IAAI,CAAC,CAACI,KAAK,CAACa,CAAC,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC;IACvF,CAAC,MAAM;MACH8B,CAAC,GAAGtB,IAAI,CAACG,KAAK,CAACR,CAAC,GAAGb,KAAK,CAACH,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG;IAC/C;;IAEA;IACA,IAAIF,OAAO,CAACF,IAAI,CAAC,EAAE;MACfsC,CAAC,GAAGb,IAAI,CAACS,GAAG,CAAC,CAAC,EAAEI,CAAC,GAAGpC,OAAO,CAACF,IAAI,CAAC,CAACG,KAAK,CAACc,CAAC,CAAC,CAAC;MAC3C8B,CAAC,GAAGtB,IAAI,CAACS,GAAG,CAAC,CAAC,EAAEa,CAAC,GAAG7C,OAAO,CAACF,IAAI,CAAC,CAACI,KAAK,CAACa,CAAC,CAAC,CAAC;IAC/C;;IAEA;IACA,MAAM+B,CAAC,GAAGvB,IAAI,CAACG,KAAK,CAAC,CAACR,CAAC,IAAIO,CAAC,GAAGE,CAAC,GAAGS,CAAC,GAAGS,CAAC,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG;IACvD;IACA,MAAME,CAAC,GAAGxB,IAAI,CAACG,KAAK,CAAC,CAACoB,CAAC,GAAGf,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG;;IAEzC;IACA,IAAIiB,QAAQ,GAAG,GAAG;IAClB,IAAIV,UAAU,CAACtB,MAAM,GAAG,CAAC,EAAE;MACvB,MAAMiC,QAAQ,GAAG1B,IAAI,CAACC,GAAG,CAAC,GAAGc,UAAU,CAACY,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,CAAC,CAAC;MACzD,MAAMQ,QAAQ,GAAG7B,IAAI,CAACS,GAAG,CAAC,GAAGM,UAAU,CAACY,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,CAAC,CAAC;MACzD,IAAIK,QAAQ,KAAKG,QAAQ,EAAE;QACvBJ,QAAQ,GAAG,IAAIzB,IAAI,CAACG,KAAK,CAACuB,QAAQ,GAAG,GAAG,CAAC,EAAE;MAC/C,CAAC,MAAM;QACHD,QAAQ,GAAG,IAAIzB,IAAI,CAACG,KAAK,CAACuB,QAAQ,GAAG,GAAG,CAAC,KAAK1B,IAAI,CAACG,KAAK,CAAC0B,QAAQ,GAAG,GAAG,CAAC,EAAE;MAC9E;IACJ;IAEA7C,OAAO,CAACmC,IAAI,CAAC;MACTxB,CAAC;MAAEO,CAAC;MAAEE,CAAC;MAAEC,CAAC;MAAEQ,CAAC;MAAES,CAAC;MAAEX,CAAC;MAAEY,CAAC;MAAEf,CAAC;MAAEgB,CAAC;MAAER,KAAK,EAAES;IACzC,CAAC,CAAC;IACFxC,gBAAgB,IAAIoB,CAAC;EACzB;EACA,OAAOrB,OAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}